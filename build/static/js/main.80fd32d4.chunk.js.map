{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","provider","auth","GoogleAuthProvider","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentItem","username","items","user","handleChange","bind","assertThisInitialized","handleSubmit","login","logout","e","setState","defineProperty","target","name","value","_this2","signOut","then","_this3","signInWithPopup","result","preventDefault","itemsRef","database","ref","item","title","displayName","email","push","_this4","onAuthStateChanged","on","snapshot","val","newState","id","itemId","concat","remove","_this5","react_default","a","createElement","className","onClick","src","photoURL","onSubmit","type","placeholder","onChange","map","key","removeItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80fd32d4.chunk.js","sourcesContent":["//import React, { Component } from 'react';\n  import firebase from 'firebase'\n\n\n  // Initialize Firebase\n  var config = {\n    apiKey: \"AIzaSyAgSfLzOQkWaCrt7ycNcnWhAxt9JyFR_cc\",\n    authDomain: \"fun-food-friends-a5658.firebaseapp.com\",\n    databaseURL: \"https://fun-food-friends-a5658.firebaseio.com\",\n    projectId: \"fun-food-friends-a5658\",\n    storageBucket: \"fun-food-friends-a5658.appspot.com\",\n    messagingSenderId: \"690487521270\"\n  };\n  firebase.initializeApp(config);\n  export const provider = new firebase.auth.GoogleAuthProvider();\n  export const auth = firebase.auth();\n  export default firebase;\n","import React, { Component } from 'react';\n//import { LinkContainer } from 'react-router-bootstrap';\nimport './App.css';\nimport firebase, { auth, provider } from './firebase';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentItem: '',\n      username: '',\n      items: [],\n      user: null\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n  logout() {\n    auth.signOut()\n    .then(() => {\n      this.setState({\n        user: null\n      });\n    });\n\n  }\n  login() {\n    auth.signInWithPopup(provider)\n    .then((result) => {\n      const user = result.user;\n      this.setState({\n        user\n      });\n    });\n  }\n  handleSubmit(e) {\n    e.preventDefault();\n    const itemsRef = firebase.database().ref('items');\n    const item = {\n      title: this.state.currentItem,\n      user: this.state.user.displayName || this.state.user.email\n    }\n    itemsRef.push(item);\n    this.setState({\n      currentItem: '',\n      username: ''\n    });\n  }\n  componentDidMount() {\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({ user });\n      }\n    });\n    const itemsRef = firebase.database().ref('items');\n    itemsRef.on('value', (snapshot) => {\n      let items = snapshot.val();\n      let newState = [];\n      for (let item in items) {\n        newState.push({\n          id: item,\n          title: items[item].title,\n          user: items[item].user\n        });\n      }\n      this.setState({\n        items: newState\n      });\n    });\n  }\n  removeItem(itemId) {\n    const itemRef = firebase.database().ref(`/items/${itemId}`);\n    itemRef.remove();\n  }\n  render() {\n    return (\n      <div className='app'>\n      <header>\n      <div className=\"wrapper\">\n    <h1>Fun Food Friends</h1>\n    {this.state.user ?\n      <button onClick={this.logout}>Logout</button>\n      :\n      <button onClick={this.login}>Log In</button>\n    }\n  </div>\n</header>\n{this.state.user ?\n  <div>\n    <div className='user-profile'>\n      <img src={this.state.user.photoURL} />\n    </div>\n    <div className='container'>\n    <section className='add-item'>\n      <form onSubmit={this.handleSubmit}>\n        <input type=\"text\" name=\"username\" placeholder=\"What's your name?\" value={this.state.user.displayName || this.state.user.email} />\n        <input type=\"text\" name=\"currentItem\" placeholder=\"What are you bringing?\" onChange={this.handleChange} value={this.state.currentItem} />\n        <button>Add Item</button>\n      </form>\n    </section>\n    <section className='display-item'>\n    <div className=\"wrapper\">\n      <ul>\n        {this.state.items.map((item) => {\n          return (\n            <li key={item.id}>\n              <h3>{item.title}</h3>\n              <p>brought by: {item.user}\n                 {item.user === this.state.user.displayName || item.user === this.state.user.email ?\n                   <button onClick={() => this.removeItem(item.id)}>Remove Item</button> : null}\n              </p>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  </section>\n  </div>\n  </div>\n  :\n  <div className='wrapper'>\n    <p>You must be logged in to see the potluck list and submit to it.</p>\n  </div>\n}\n</div>\n)}\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}